import { NextRequest, NextResponse } from 'next/server';
import { GoogleGenAI } from "@google/genai";

// ===== RETRY HELPER WITH EXPONENTIAL BACKOFF =====
/**
 * G·ªçi Gemini API v·ªõi c∆° ch·∫ø retry t·ª± ƒë·ªông khi g·∫∑p l·ªói
 * @param ai - GoogleGenAI client instance
 * @param requestConfig - Config cho generateContent request
 * @param maxRetries - S·ªë l·∫ßn retry t·ªëi ƒëa (m·∫∑c ƒë·ªãnh 3)
 * @returns Response t·ª´ Gemini API
 */
const callGeminiWithRetry = async (
    ai: GoogleGenAI,
    requestConfig: any,
    maxRetries: number = 3
): Promise<any> => {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            console.log(`üîÑ L·∫ßn th·ª≠ ${attempt}/${maxRetries}...`);

            const response = await ai.models.generateContent(requestConfig);

            // Ki·ªÉm tra response c√≥ h·ª£p l·ªá kh√¥ng
            if (!response.candidates?.[0]?.content) {
                throw new Error('Response t·ª´ Gemini r·ªóng');
            }

            console.log(`‚úÖ Th√†nh c√¥ng ·ªü l·∫ßn th·ª≠ ${attempt}`);
            return response;

        } catch (error: any) {
            const isLastAttempt = attempt === maxRetries;
            const statusCode = error?.status || error?.response?.status || 500;

            console.error(`‚ùå L·∫ßn th·ª≠ ${attempt} th·∫•t b·∫°i:`, error.message || error);

            // Kh√¥ng retry v·ªõi l·ªói client (4xx) tr·ª´ 429 (rate limit)
            if (statusCode >= 400 && statusCode < 500 && statusCode !== 429) {
                console.error(`‚ùå L·ªói client ${statusCode}, kh√¥ng retry`);
                throw error;
            }

            // N·∫øu l√† l·∫ßn th·ª≠ cu·ªëi c√πng, throw error
            if (isLastAttempt) {
                console.error(`‚ùå T·∫•t c·∫£ ${maxRetries} l·∫ßn th·ª≠ ƒë·ªÅu th·∫•t b·∫°i`);
                throw error;
            }

            // Exponential backoff: 2s, 4s, 8s, ...
            const waitTime = Math.pow(2, attempt) * 1000;
            console.log(`‚è≥ ƒê·ª£i ${waitTime}ms tr∆∞·ªõc khi th·ª≠ l·∫°i...`);
            await new Promise(resolve => setTimeout(resolve, waitTime));
        }
    }

    throw new Error('Retry logic th·∫•t b·∫°i');
};

// ===== HELPER FUNCTIONS =====
/**
 * Convert video URL th√†nh base64 string
 */
const videoUrlToBase64 = async (videoUrl: string): Promise<string> => {
    console.log('üì• ƒêang t·∫£i video t·ª´ URL');

    try {
        const response = await fetch(videoUrl, {
            method: 'GET',
            signal: AbortSignal.timeout(60000), // Timeout 60 gi√¢y
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        // Ki·ªÉm tra k√≠ch th∆∞·ªõc file
        const contentLength = response.headers.get('content-length');
        const fileSizeInMB = contentLength ? parseInt(contentLength) / (1024 * 1024) : 0;

        // if (fileSizeInMB > 20) {
        //     throw new Error(`Video qu√° l·ªõn: ${fileSizeInMB.toFixed(2)}MB. T·ªëi ƒëa 20MB.`);
        // }

        if (fileSizeInMB > 0) {
            console.log(`üìä K√≠ch th∆∞·ªõc video: ${fileSizeInMB.toFixed(2)}MB`);
        }

        const arrayBuffer = await response.arrayBuffer();
        const base64 = btoa(
            new Uint8Array(arrayBuffer).reduce(
                (data, byte) => data + String.fromCharCode(byte),
                ''
            )
        );

        console.log('‚úÖ Video ƒë√£ ƒë∆∞·ª£c convert sang base64');
        return base64;
    } catch (error: any) {
        console.error('‚ùå L·ªói videoUrlToBase64:', error.message);
        throw new Error(`Kh√¥ng th·ªÉ t·∫£i video: ${error.message}`);
    }
};

/**
 * Format timestamp t·ª´ milliseconds sang MM:SS ho·∫∑c HH:MM:SS
 */
const formatTimestamp = (ms: number): string => {
    const totalSeconds = Math.floor(ms / 1000);
    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor((totalSeconds % 3600) / 60);
    const seconds = totalSeconds % 60;

    if (hours > 0) {
        return `${hours}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
    }
    return `${minutes}:${String(seconds).padStart(2, '0')}`;
};

/**
 * Convert array transcript th√†nh text format
 */
const transcriptArrayToText = (transcripts: any[]): string => {
    return transcripts
        .map((segment) => {
            const timestamp = formatTimestamp(segment.startTs);
            return `[${timestamp}] Speaker ${segment.speakerId}: ${segment.text}`;
        })
        .join('\n');
};

/**
 * Parse improved transcript text th√†nh array format
 */
const parseImprovedTranscript = (improvedText: string, originalSegments: any[]) => {
    const lines = improvedText.split('\n').filter(line => line.trim());
    const result: any[] = [];
    const regex = /\[(\d+:\d+(?::\d+)?)\]\s*Speaker\s*(\d+|male-voice|female-voice):\s*(.+)/i;

    lines.forEach((line, index) => {
        const match = line.match(regex);
        if (match) {
            const [, timestamp, speakerId, text] = match;
            const parts = timestamp.split(':').map(Number);
            let startMs = 0;

            if (parts.length === 3) {
                startMs = (parts[0] * 3600 + parts[1] * 60 + parts[2]) * 1000;
            } else {
                startMs = (parts[0] * 60 + parts[1]) * 1000;
            }

            const nextMatch = lines[index + 1]?.match(regex);
            let stopMs = startMs + 3000;

            if (nextMatch) {
                const nextParts = nextMatch[1].split(':').map(Number);
                if (nextParts.length === 3) {
                    stopMs = (nextParts[0] * 3600 + nextParts[1] * 60 + nextParts[2]) * 1000;
                } else {
                    stopMs = (nextParts[0] * 60 + nextParts[1]) * 1000;
                }
            }

            result.push({
                speakerId,
                type: 'speech',
                text: text.trim(),
                startTs: startMs,
                stopTs: stopMs,
                duration: (stopMs - startMs) / 1000,
            });
        }
    });

    return result.length > 0 ? result : originalSegments.map(seg => ({
        ...seg,
        duration: (seg.stopTs - seg.startTs) / 1000,
    }));
};

// ===== API ROUTE HANDLER =====
export async function POST(request: NextRequest) {
    console.log('üöÄ API Route: process-video b·∫Øt ƒë·∫ßu');

    try {
        const { videoUrl, transcriptSegments } = await request.json();

        console.log('üìã Request:', {
            hasVideoUrl: !!videoUrl,
            transcriptCount: transcriptSegments?.length
        });

        // Validate input
        if (!videoUrl || !transcriptSegments) {
            return NextResponse.json(
                { success: false, error: 'Thi·∫øu videoUrl ho·∫∑c transcriptSegments' },
                { status: 400 }
            );
        }

        // Ki·ªÉm tra API key
        if (!process.env.GEMINI_API_KEY) {
            console.error('‚ùå Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY');
            return NextResponse.json(
                { success: false, error: 'GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh' },
                { status: 500 }
            );
        }

        console.log('‚úÖ GEMINI_API_KEY t·ªìn t·∫°i');

        // Kh·ªüi t·∫°o AI client
        const ai = new GoogleGenAI({
            apiKey: process.env.GEMINI_API_KEY,
        });

        // Convert video sang base64
        console.log('üìπ B∆∞·ªõc 1: ƒêang convert video sang base64...');
        const base64 = await videoUrlToBase64(videoUrl);

        const transcriptText = transcriptArrayToText(transcriptSegments);
        console.log('üìù Transcript ƒë√£ chu·∫©n b·ªã, ƒë·ªô d√†i:', transcriptText.length);

        // ===== B∆Ø·ªöC 2: C·∫£i thi·ªán Transcript v·ªõi RETRY =====
        console.log('ü§ñ B∆∞·ªõc 2: ƒêang c·∫£i thi·ªán transcript v·ªõi Gemini 2.5 Pro (c√≥ video)...');

        let improvedText = "";
        let improvedTranscript = transcriptSegments;

        try {
            const improvedResponse = await callGeminiWithRetry(
                ai,
                {
                    model: "gemini-2.5-pro",
                    contents: [{
                        role: "user",
                        parts: [
                            {
                                text: `
                                    T√¥i c√≥ m·ªôt ƒëo·∫°n transcript s∆° b·ªô c·ªßa video n√†y. H√£y xem video v√† d·ª±a v√†o transcript t√¥i cung c·∫•p ƒë·ªÉ t·∫°o ra m·ªôt transcript ho√†n ch·ªânh, ch√≠nh x√°c h∆°n b·∫±ng ti·∫øng Vi·ªát.

                                    Transcript s∆° b·ªô:
                                    ${transcriptText}

                                    Y√™u c·∫ßu:
                                    - S·ª≠a l·∫°i c√°c t·ª´ sai, thi·∫øu ho·∫∑c kh√¥ng r√µ r√†ng
                                    - Th√™m d·∫•u c√¢u ch√≠nh x√°c
                                    - Chia ƒëo·∫°n vƒÉn h·ª£p l√Ω
                                    - Gi·ªØ nguy√™n √Ω nghƒ©a v√† ng·ªØ c·∫£nh
                                    - ƒê·ªãnh d·∫°ng r√µ r√†ng, d·ªÖ ƒë·ªçc
                                    
                                    Tr·∫£ v·ªÅ transcript ƒë√£ c·∫£i thi·ªán theo ƒë·ªãnh d·∫°ng:
                                    [timestamp] Speaker X: <n·ªôi dung ƒë√£ s·ª≠a>

                                    Transcript ƒë√£ c·∫£i thi·ªán:
                                `
                            },
                            {
                                inlineData: {
                                    mimeType: "video/mp4",
                                    data: base64,
                                },
                            },
                        ],
                    }],
                },
                3 // Retry t·ªëi ƒëa 3 l·∫ßn
            );

            improvedText = improvedResponse.candidates?.[0]?.content?.parts?.[0]?.text ?? "";
            improvedTranscript = parseImprovedTranscript(improvedText, transcriptSegments);

        } catch (error: any) {
            console.warn('‚ö†Ô∏è B∆∞·ªõc 2 th·∫•t b·∫°i sau khi retry, s·ª≠ d·ª•ng transcript g·ªëc:', error.message);
            // Fallback: S·ª≠ d·ª•ng transcript g·ªëc n·∫øu improve failed
            improvedText = transcriptText;
            improvedTranscript = transcriptSegments.map((seg: { stopTs: number; startTs: number; }) => ({
                ...seg,
                duration: (seg.stopTs - seg.startTs) / 1000,
            }));
        }

        console.log('‚úÖ ƒê√£ parse improved transcript:', improvedTranscript.length, 'segments');

        // ===== B∆Ø·ªöC 3: T·∫°o Summary + Todo List v·ªõi RETRY (parallel) =====
        console.log('ü§ñ B∆∞·ªõc 3: ƒêang t·∫°o summary v√† todo list v·ªõi Gemini 2.0 Flash (parallel, ch·ªâ text)...');

        let summary = "Kh√¥ng c√≥ k·∫øt qu·∫£.";
        let todoList: any[] = [];

        try {
            const [summaryResponse, todoResponse] = await Promise.all([
                // Summary v·ªõi retry
                callGeminiWithRetry(
                    ai,
                    {
                        model: "gemini-2.0-flash",
                        contents: [{
                            role: "user",
                            parts: [{
                                text: `
                                    H√£y ph√¢n t√≠ch transcript cu·ªôc h·ªçp sau v√† t·∫°o m·ªôt b·∫£n t√≥m t·∫Øt chi ti·∫øt b·∫±ng ti·∫øng Vi·ªát.

                                    Y√™u c·∫ßu:
                                    - T√≥m t·∫Øt n·ªôi dung ch√≠nh c·ªßa cu·ªôc h·ªçp (3-5 c√¢u)
                                    - Li·ªát k√™ c√°c ch·ªß ƒë·ªÅ ƒë∆∞·ª£c th·∫£o lu·∫≠n
                                    - Ghi l·∫°i c√°c quy·∫øt ƒë·ªãnh quan tr·ªçng (n·∫øu c√≥)
                                    - L∆∞u √Ω c√°c ƒëi·ªÉm n·ªïi b·∫≠t ho·∫∑c tranh lu·∫≠n
                                    - ƒê·ªãnh d·∫°ng r√µ r√†ng v·ªõi c√°c m·ª•c bullet point

                                    Transcript:
                                    ${improvedText}

                                    H√£y tr·∫£ v·ªÅ summary ho√†n ch·ªânh:
                                `
                            }],
                        }],
                    },
                    2 // Retry t·ªëi ƒëa 2 l·∫ßn cho summary
                ),

                // Todo List v·ªõi retry
                callGeminiWithRetry(
                    ai,
                    {
                        model: "gemini-2.0-flash",
                        contents: [{
                            role: "user",
                            parts: [{
                                text: `
                                    D·ª±a tr√™n transcript cu·ªôc h·ªçp sau, h√£y t·∫°o m·ªôt danh s√°ch todo/action items chi ti·∫øt b·∫±ng ti·∫øng Vi·ªát.

                                    Y√™u c·∫ßu:
                                    - X√°c ƒë·ªãnh t·∫•t c·∫£ c√°c nhi·ªám v·ª•/c√¥ng vi·ªác c·∫ßn l√†m ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p
                                    - G√°n ng∆∞·ªùi ch·ªãu tr√°ch nhi·ªám cho t·ª´ng task (d·ª±a v√†o Speaker ID trong transcript)
                                    - ∆Ø·ªõc l∆∞·ª£ng deadline n·∫øu ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn (format: DD-MM-YYYY)
                                    - N·∫øu kh√¥ng c√≥ deadline r√µ r√†ng, ƒë·ªÉ null
                                    - startDate m·∫∑c ƒë·ªãnh null n·∫øu kh√¥ng ƒë∆∞·ª£c nh·∫Øc
                                    - endDate m·∫∑c ƒë·ªãnh null n·∫øu kh√¥ng ƒë∆∞·ª£c nh·∫Øc
                                    - assigneeId l·∫•y t·ª´ Speaker ID trong transcript, m·∫∑c ƒë·ªãnh l√† null n·∫øu kh√¥ng r√µ
                                    - M·ªói task n√™n ng·∫Øn g·ªçn, r√µ r√†ng

                                    **B·∫ÆT BU·ªòC: Tr·∫£ v·ªÅ ONLY JSON array, KH√îNG c√≥ markdown, KH√îNG c√≥ text th·ª´a.**

                                    Format JSON:
                                    [
                                      {
                                        "id": "todo-1",
                                        "title": "T√™n task ng·∫Øn g·ªçn",
                                        "description": "M√¥ t·∫£ chi ti·∫øt task",
                                        "assigneeId": "1",
                                        "startDate": "13-10-2025",
                                        "endDate": "20-10-2025"
                                      },
                                      {
                                        "id": "todo-2",
                                        "title": "Task kh√°c",
                                        "description": "M√¥ t·∫£",
                                        "assigneeId": null,
                                        "startDate": null,
                                        "endDate": null
                                      }
                                    ]

                                    CH√ö √ù:
                                    - id: t·ª± ƒë·ªông tƒÉng "todo-1", "todo-2", ...
                                    - assigneeId: l·∫•y t·ª´ Speaker ID trong transcript (v√≠ d·ª•: "1", "4", "male-voice")
                                    - N·∫øu kh√¥ng r√µ ai l√†m, ƒë·ªÉ null
                                    - startDate/endDate: format DD-MM-YYYY ho·∫∑c null
                                    - Ch·ªâ tr·∫£ v·ªÅ JSON array, kh√¥ng c√≥ text gi·∫£i th√≠ch

                                    Transcript:
                                    ${improvedText}

                                    JSON:
                                `
                            }],
                        }],
                    },
                    2 // Retry t·ªëi ƒëa 2 l·∫ßn cho todo
                ),
            ]);

            summary = summaryResponse.candidates?.[0]?.content?.parts?.[0]?.text ?? "Kh√¥ng c√≥ k·∫øt qu·∫£.";
            const todoRawText = todoResponse.candidates?.[0]?.content?.parts?.[0]?.text ?? "[]";

            // Clean v√† parse todo list JSON
            try {
                let cleanedTodo = todoRawText.trim();
                // X√≥a markdown code blocks n·∫øu c√≥
                if (cleanedTodo.startsWith('```json')) {
                    cleanedTodo = cleanedTodo.replace(/```json\n?/g, '').replace(/```/g, '');
                } else if (cleanedTodo.startsWith('```')) {
                    cleanedTodo = cleanedTodo.replace(/```/g, '');
                }

                todoList = JSON.parse(cleanedTodo.trim());
                console.log('‚úÖ Todo list parsed th√†nh c√¥ng:', todoList.length, 'items');
            } catch (parseError) {
                console.error('‚ùå Kh√¥ng th·ªÉ parse todo JSON:', parseError);
                todoList = [];
            }

        } catch (error: any) {
            console.warn('‚ö†Ô∏è B∆∞·ªõc 3 th·∫•t b·∫°i m·ªôt ph·∫ßn sau khi retry:', error.message);
            // Ti·∫øp t·ª•c v·ªõi k·∫øt qu·∫£ partial (c√≥ th·ªÉ c√≥ summary nh∆∞ng kh√¥ng c√≥ todo)
        }

        console.log('‚úÖ B∆∞·ªõc 3 ho√†n th√†nh: Summary v√† Todo list ƒë√£ ƒë∆∞·ª£c t·∫°o');

        // Tr·∫£ v·ªÅ k·∫øt qu·∫£ (ngay c·∫£ khi ch·ªâ c√≥ partial results)
        console.log('üéâ X·ª≠ l√Ω ho√†n t·∫•t!');
        return NextResponse.json({
            success: true,
            data: {
                improvedTranscript,
                summary,
                todoList,
            },
        });

    } catch (error: any) {
        console.error('‚ùå L·ªói API Route:', error);
        return NextResponse.json(
            {
                success: false,
                error: error.message || 'Kh√¥ng th·ªÉ x·ª≠ l√Ω video'
            },
            { status: 500 }
        );
    }
}
